// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  user_id                String             @id @default(cuid())
  username               String
  // Use a mandatory workEmail
  workEmail              String
  personalEmail          String?
  password_hash          String
  user_role              UserRole
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt

  // Name and role details
  firstName              String?
  lastName               String?
  jobRole                JobRole?           // Enum field for the user's job role
  certifications         String?            // Could be array or Json if storing multiple certs
  about                  String?
  profilePicture         String?            // URL/path to profile image

  // Phone numbers
  workPhone              String
  personalPhone          String?

  // Expanded address fields
  addressLine1           String?
  addressLine2           String?
  city                   String?
  state                  String?
  postalCode             String?
  country                String?

  // Preference for receiving schedule notifications via email
  receiveScheduleByEmail Boolean            @default(false)

  // Relationships
  ShiftRequests          ShiftRequest[]
  UserPreferences        UserPreference[]
  ShiftAssignments       ShiftAssignment[]
  ShiftLimit             ShiftLimit?
}

// New enum for user-specific job roles
enum JobRole {
  TEAM_LEADER
  TECHNICAL_SUPPORT
  SERVICE_DESK_ASSOCIATE
  IITC
}

model ShiftPattern {
  pattern_id      String           @id @default(cuid())
  shift_name      String
  start_time      String
  end_time        String
  Shifts          Shift[]
  ShiftRequests   ShiftRequest[]
  UserPreferences UserPreference[]
}

model Shift {
  shift_id        String           @id @default(cuid())
  shift_date      DateTime
  pattern         ShiftPattern     @relation(fields: [pattern_id], references: [pattern_id], onDelete: Cascade)
  pattern_id      String
  created_at      DateTime         @default(now())
  ShiftRequests   ShiftRequest[]
  ShiftAssignments ShiftAssignment[]
}

model ShiftRequest {
  request_id      String           @id @default(cuid())
  user            User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         String
  shift           Shift            @relation(fields: [shift_id], references: [shift_id], onDelete: Cascade)
  shift_id        String
  pattern         ShiftPattern     @relation(fields: [pattern_id], references: [pattern_id], onDelete: Cascade)
  pattern_id      String
  status          RequestStatus
  request_date    DateTime         @default(now())
}

model UserPreference {
  preference_id   String           @id @default(cuid())
  user            User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         String
  pattern         ShiftPattern     @relation(fields: [pattern_id], references: [pattern_id], onDelete: Cascade)
  pattern_id      String
  created_at      DateTime         @default(now())
}

model ShiftAssignment {
  assignment_id   String           @id @default(cuid())
  user            User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         String
  shift           Shift            @relation(fields: [shift_id], references: [shift_id], onDelete: Cascade)
  shift_id        String
  shift_role      ShiftRole
}

model ShiftLimit {
  user            User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         String           @id
  month_year      DateTime
  request_count   Int
  request_limit   Int
}

// Enums

enum UserRole {
  admin
  user
  developer
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum ShiftRole {
  QM
  SL
  ASL
  TR
  SH
  CI
  NR
}